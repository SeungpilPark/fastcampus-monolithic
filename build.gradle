group = 'com.fastcampus'
version = '0.0.1-SNAPSHOT'

buildscript {
    ext {
        springBootVersion = '2.3.7'
        springBootGradleVersion = '2.3.7.RELEASE'
        lombokVersion = '1.18.4'
        groovyVersion = '2.5.9'
        spockSpringVersion = '1.3-groovy-2.5'
        mariadbJavaClientVersion = "2.4.1"
        flywayVersion = '5.1.4'
        querydslGradlePluginVersion = "1.0.10"
        queryDslVersion = '4.2.1'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.springframework.boot:spring-boot-gradle-plugin:${springBootGradleVersion}"
        classpath "gradle.plugin.com.boxfuse.client:gradle-plugin-publishing:${flywayVersion}"
        classpath("gradle.plugin.com.ewerk.gradle.plugins:querydsl-plugin:$querydslGradlePluginVersion")
    }
}

def querydslProjects = [project(':backend')]
configure(querydslProjects) {
    apply plugin: "com.ewerk.gradle.plugins.querydsl"

    dependencies {
        compile("com.querydsl:querydsl-jpa")
        compile("com.querydsl:querydsl-apt")
    }

    def querydslSrcDir = "src/main/generated"

    querydsl {
        library = "com.querydsl:querydsl-apt:${queryDslVersion}"
        jpa = true
        querydslSourcesDir = querydslSrcDir
    }
    compileQuerydsl {
        options.annotationProcessorPath = configurations.querydsl
    }
    configurations {
        querydsl.extendsFrom compileClasspath
    }
    sourceSets {
        main {
            java {
                srcDirs = ["src/main/java", querydslSrcDir]
            }
        }
    }
    tasks.withType(JavaCompile) {
        options.annotationProcessorGeneratedSourcesDirectory = file(querydslSrcDir)
    }
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
    apply plugin: 'idea'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'

    targetCompatibility = '11'
    sourceCompatibility = '11'
    compileJava.options.encoding = 'UTF-8'

    configurations {
        compileOnly {
            extendsFrom annotationProcessor
        }
    }

    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }

    dependencies {
        compile group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '6.1'
        compile('com.fasterxml.jackson.datatype:jackson-datatype-jsr310')
        compile('com.fasterxml.jackson.datatype:jackson-datatype-hibernate5')
        compile 'com.jayway.jsonpath:json-path:2.4.0'

        compile group: 'javax.validation', name: 'validation-api', version: '2.0.1.Final'
        compile group: 'org.hibernate.validator', name: 'hibernate-validator', version: '6.1.2.Final'

        compileOnly 'org.projectlombok:lombok'
        annotationProcessor 'org.projectlombok:lombok'

        testCompile('org.springframework.boot:spring-boot-starter-test')
        testCompile('org.spockframework:spock-core:1.2-groovy-2.4')
        testCompile('org.spockframework:spock-spring:1.2-groovy-2.4')
        testCompile "org.codehaus.groovy:groovy:${groovyVersion}"
    }


    sourceSets {
        integrationTest {
            java {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/java')
            }
            groovy {
                compileClasspath += main.output + test.output
                runtimeClasspath += main.output + test.output
                srcDir file('src/integrationTest/groovy')
            }
            resources.srcDir file('src/integrationTest/resources')
        }
    }

    configurations {
        integrationTestCompile.extendsFrom testCompile
        integrationTestRuntime.extendsFrom testRuntime
    }

    task integrationTest(type: Test) {
        afterTest { desc, result ->
            logger.quiet "Executing integration test ${desc.name} [${desc.className}] with result: ${result.resultType}"
        }
        testClassesDirs = sourceSets.integrationTest.output.classesDirs
        classpath = sourceSets.integrationTest.runtimeClasspath
        outputs.upToDateWhen { false }
    }

    bootJar.enabled = true
    jar.enabled = false
    jar.dependsOn test
}
